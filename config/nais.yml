#
# Templated nais.yml for all apps in all clusters.
#
# Run the deploy tool with 'dry run' to see the results:
# docker run --rm -it -v $(PWD)/config:/config \
#   -e CLUSTER=dev-gcp \
#   -e VAR="team=tbd,app=<my-app>" \
#   ghcr.io/nais/deploy/deploy:latest /app/deploy \
#     --dry-run --print-payload --resource /config/nais.yml --vars /config/<my-app>/dev-gcp.yml
apiVersion: nais.io/v1alpha1
kind: Application
metadata:
  {{#if annotations}}
  annotations:
    {{#each annotations as |item| }}
    {{item.key}}: {{item.value}}
    {{/each}}
  {{/if}}
  name: spre-{{app}}
  namespace: tbd
  labels:
    team: tbd
spec:
  image: {{image}}
  port: 8080
  observability:
    logging:
      destinations:
        - id: elastic
        - id: loki
  strategy:
  {{#if recreateStrategy }}
    type: Recreate
  {{else}}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  {{/if}}
  replicas:
    disableAutoScaling: {{#if replicas.disableAutoScaling }}{{ replicas.disableAutoScaling }}{{else}}false{{/if}}
    min: {{replicas.min}}
    max: {{replicas.max}}
    {{#if kafkaPool}}
    scalingStrategy:
      kafka:
        topic: tbd.rapid.v1
        consumerGroup: {{#if kafkaConsumerGroup }}{{ kafkaConsumerGroup }}{{else}}tbd-spre-{{app}}-v1{{/if}}
        threshold: 200
    {{/if}}
  liveness:
    path: isalive
    initialDelay: {{#if livenessInitialDelay }}{{ livenessInitialDelay }}{{else}}5{{/if}}
  readiness:
    path: isready
    initialDelay: {{#if readinessInitialDelay }}{{ readinessInitialDelay }}{{else}}5{{/if}}
  preStopHook:
    http:
      path: /stop
  resources:
    limits:
      memory: {{#if maxMemory }}{{ maxMemory }}{{else}}1024Mi{{/if}}
    requests:
      cpu: 250m
      memory: 128Mi
  {{#if kafkaPool}}
  kafka:
    pool: {{ kafkaPool }}
  {{/if}}
  {{#if azure}}
  azure:
    application:
      enabled: {{azure.enabled}}
      {{#if azure.tenant}}
      tenant: {{azure.tenant}}
      {{/if}}
  {{/if}}
  accessPolicy:
    outbound:
      rules:
        - application: logging
          namespace: nais-system
        {{# each accessPolicy.outbound as |item| }}
        - application: {{ item.application }}
          namespace: {{ item.namespace }}
          cluster: {{ item.cluster }}
        {{/each}}
      external:
        {{# each accessPolicy.external as |item| }}
        - host: {{item}}
        {{/each}}
  {{#if gcp}}
  gcp:
    sqlInstances:
      - type: {{gcp.type}}
        tier: {{#if gcp.sqlInstanceTier}}{{ gcp.sqlInstanceTier }}{{else}}db-custom-4-16384{{/if}}
        name: {{gcp.databaseName}}
        diskAutoresize: true
        pointInTimeRecovery: true
        databases:
          - name: {{gcp.databaseName}}
            envVarPrefix: {{#if gcp.envVarPrefix}}{{ gcp.envVarPrefix }}{{else}}DB{{/if}}
            {{#if gcp.datastream}}
            users:
              - name: bigquery-datastream
            {{/if}}
        {{#if gcp.datastream}}
        flags:
          - name: cloudsql.logical_decoding
            value: "on"
        {{/if}}
  {{/if}}
  prometheus:
    enabled: true
    path: /metrics
  secureLogs:
    enabled: true
  env:
  - name: KAFKA_CONSUMER_GROUP_ID
    value: {{#if kafkaConsumerGroup }}{{ kafkaConsumerGroup }}{{else}}tbd-spre-{{app}}-v1{{/if}}
  - name: KAFKA_RAPID_TOPIC
    value: tbd.rapid.v1
  - name: KAFKA_RESET_POLICY
    value: {{#if kafkaResetPolicy }}{{ kafkaResetPolicy }}{{else}}none{{/if}}
  {{# each env as |item| }}
  - name: {{ item.name }}
    value: "{{ item.value }}"
  {{/each }}
