#
# Templated nais.yml for all apps in all clusters.
#
# Run the deploy tool with 'dry run' to see the results:
# docker run --rm -it -v $(PWD)/config:/config \
#   -e CLUSTER=dev-gcp \
#   -e VAR="team=tbd,app=<my-app>" \
#   ghcr.io/nais/deploy/deploy:latest /app/deploy \
#     --dry-run --print-payload --resource /config/nais.yml --vars /config/<my-app>/dev-gcp.yml
apiVersion: nais.io/v1alpha1
kind: Application
metadata:
  name: spre-{{app}}
  namespace: {{team}}
  labels:
    team: {{team}}
spec:
  image: {{image}}
  port: 8080
  {{#if strategy}}
  strategy:
    type: {{strategy}}
  {{/if}}
  liveness:
    path: isalive
    initialDelay: {{#if livenessInitialDelay }}{{ livenessInitialDelay }}{{else}}5{{/if}}
  readiness:
    path: isready
    initialDelay: {{#if readinessInitialDelay }}{{ readinessInitialDelay }}{{else}}5{{/if}}
  resources:
    limits:
      cpu: 2000m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
  replicas:
    min: {{#if minReplicas }}{{ minReplicas }}{{else}}1{{/if}}
    max: {{#if maxReplicas }}{{ maxReplicas }}{{else}}1{{/if}}
    cpuThresholdPercentage: 75
  {{#if kafkaPool}}
  kafka:
    pool: {{ kafkaPool }}
  {{/if}}
  {{#if azure}}
  azure:
    application:
      enabled: {{azure.enabled}}
      {{#if azure.tenant}}
      tenant: {{azure.tenant}}
      {{/if}}
  {{/if}}
  {{#if gcp}}
  gcp:
    sqlInstances:
      - type: {{gcp.type}}
        databases:
          - name: {{gcp.databaseName}}
            envVarPrefix: DB
        diskAutoresize: {{#if diskAutoResize }}{{ diskAutoResize }}{{else}}false{{/if}}
  {{/if}}
  prometheus:
    enabled: true
    path: /metrics
  webproxy: true
  secureLogs:
    enabled: true
  vault:
    enabled: true
    {{#if mountPaths}}
    paths:
    {{# each mountPaths as |item| }}
      - mountPath: {{ item.mountPath }}
        kvPath: {{ item.kvPath }}
    {{/each}}
    {{/if}}
  {{#if ingresses}}
  ingresses:
  {{#each ingresses as |item| }}
  - {{item}}
  {{/each}}
  {{/if}}
  {{#if fromEnv}}
  fromEnv:
  {{# each fromEnv as |item| }}
    - secret: {{ item }}
  {{/each}}{{/if}}
  env:
  - name: KAFKA_CONSUMER_GROUP_ID
    value: {{#if kafkaConsumerGroup }}{{ kafkaConsumerGroup }}{{else}}{{team}}-spre-{{app}}-v1{{/if}}
  - name: KAFKA_RAPID_TOPIC
    value: tbd.rapid.v1
  - name: KAFKA_RESET_POLICY
    value: {{#if kafkaResetPolicy }}{{ kafkaResetPolicy }}{{else}}none{{/if}}
  - name: GIT_SHA
    value: "{{ git_sha }}"
  {{# each env as |item| }}
  - name: {{ item.name }}
    value: "{{ item.value }}"
  {{/each }}
