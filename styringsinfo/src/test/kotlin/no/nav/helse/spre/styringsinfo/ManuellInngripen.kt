package no.nav.helse.spre.styringsinfo

import com.github.navikt.tbd_libs.rapids_and_rivers.JsonMessage
import com.github.navikt.tbd_libs.rapids_and_rivers.isMissingOrNull
import com.github.navikt.tbd_libs.rapids_and_rivers_api.MessageProblems
import com.zaxxer.hikari.HikariConfig
import com.zaxxer.hikari.HikariDataSource
import io.micrometer.core.instrument.Clock.SYSTEM
import io.micrometer.prometheusmetrics.PrometheusConfig.DEFAULT
import io.micrometer.prometheusmetrics.PrometheusMeterRegistry
import io.prometheus.metrics.model.registry.PrometheusRegistry.defaultRegistry
import java.io.File
import java.util.*
import no.nav.helse.spre.styringsinfo.teamsak.behandling.PostgresBehandlingshendelseDao
import no.nav.helse.spre.styringsinfo.teamsak.hendelse.BehandlingOpprettet
import no.nav.helse.spre.styringsinfo.teamsak.hendelse.Hendelse
import no.nav.helse.spre.styringsinfo.teamsak.hendelse.HendelseRiver.Companion.hendelseId
import no.nav.helse.spre.styringsinfo.teamsak.hendelse.HendelseRiver.Companion.tidspunkt
import no.nav.helse.spre.styringsinfo.teamsak.hendelse.PostgresHendelseDao
import no.nav.helse.spre.styringsinfo.teamsak.hendelse.VedtakFattet

fun main() {
    // Send inn jdbc url som printes i consolen n친r du kobler til nais postgres proxy
    val manuell = ManuellInngripen(
        jdbcUrl = "<fyll-meg>"
    )
    // For behandling_opprettet m친 du f칮rst finne akt칮rId fra f칮dselsnummer i meldingen (f.eks i Spanner) ettersom den i appen sl친es opp mot Speed (PDL)
    // KOMMENTER MEG UT OM DU IKKE SKAL H칀NDETERE EN BEHANDLING_OPPRETTET
    manuell.h친ndterBehandlingOpprettet(
        path = "<path-til-json-meldingen-appen-ikke-har-h친ndtert-f-eks-absolute-path-til-scratchfil>",
        akt칮rId = "<akt칮rId-verdi-du-finner-et-sted>"
    )
    // Noen ganger kommer det av ukjente 친rsaker vedtak_fattet _uten_ tags.
    // Dette l칮ses ved 친 ta meldingen som mangler tags i en scratchfil og legge til de riktige tagsene (ved f.eks. 친 spore opp utkast_til_vedtak og finne tags der)
    // N친r det er 游붋 kan du kj칮re denne funksjonen
    // KOMMENTER MEG UT OM DU IKKE SKAL H칀NDETER EN VEDTAK_FATTET
    manuell.h친ndterVedtakFattet(
        path = "<path-til-json-meldingen-appen-ikke-har-h친ndtert-f-eks-absolute-path-til-scratchfil>"
    )
}

private class ManuellInngripen(jdbcUrl: String) {
    private val dataSource = HikariDataSource(HikariConfig().apply {
        this.jdbcUrl = jdbcUrl
    })
    private val hendelseDao = PostgresHendelseDao(dataSource)
    private val behandlingstatusDao = PostgresBehandlingshendelseDao(dataSource)

    fun h친ndterBehandlingOpprettet(path: String, akt칮rId: String) {
        val packet = packetOrNull(path, "behandling_opprettet") ?: return
        BehandlingOpprettet.valider(packet)
        h친ndter(BehandlingOpprettet.opprett(packet, akt칮rId))
    }

    fun h친ndterVedtakFattet(path: String) {
        val packet = packetOrNull(path, "vedtak_fattet") ?: return
        // Det som h친ndteres som "preconditions" i appen til vanlig.
        packet.interestedIn("sykepengegrunnlagsfakta", "utbetalingId")
        check(!packet["sykepengegrunnlagsfakta"].isMissingOrNull()) { "vedtak_fattet uten sykepengegrunnlagsfakta skal ikke h친ndteres" }
        check(!packet["utbetalingId"].isMissingOrNull()) { "vedtak_fattet uten utbetalingId skal ikke h친ndteres" }
        VedtakFattet.valider(packet)
        h친ndter(VedtakFattet.opprett(packet))
    }

    private fun h친ndter(hendelse: Hendelse) {
        hendelseDao.lagre(hendelse)
        hendelse.h친ndter(behandlingstatusDao)
        println("H친ndtert hendelse med med @id ${hendelse.id}")
    }

    private fun packetOrNull(path: String, eventName: String): JsonMessage? {
        val packet = path.jsonMessage(eventName)
        val id = packet.hendelseId
        if (behandlingstatusDao.harH친ndtertHendelseTidligere(id)) {
            println("Hendelse med @id $id er allerede h친ndtert.")
            return null
        }
        return packet
    }

    private val meterRegistry = PrometheusMeterRegistry(DEFAULT, defaultRegistry, SYSTEM)
    private fun String.jsonMessage(eventName: String) = File(this).readText().let {
        JsonMessage(it, MessageProblems(it), meterRegistry).also { packet -> defaultValidering(packet, eventName) }
    }
    private fun defaultValidering(packet: JsonMessage, eventName: String) = with(packet) {
        requireValue("@event_name", eventName)
        require("@opprettet") { opprettet -> opprettet.tidspunkt }
        require("@id") { id -> UUID.fromString(id.asText()) }
        interestedIn("vedtaksperiodeId", "behandlingId")
    }
}

