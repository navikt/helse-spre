name: Build
on:
  push:
    branches:
      - main
jobs:
  generate_vars:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      deployMatrix: ${{ steps.set-matrix.outputs.deployMatrix }}
      emptyMatrix: ${{ steps.set-matrix.outputs.emptyMatrix }}
      emptyDeployMatrix: ${{ steps.set-matrix.outputs.emptyDeployMatrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'
      - name: cache gradle wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - id: set-changed-files
        run: |
          # create a comma-separated list of changed files
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $GITHUB_SHA | tr '\r\n' ',' | sed -e 's/,$//')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
      - id: set-matrix
        run: |
          MATRIX=$(./gradlew -q buildMatrix --console=plain)
          DEPLOY_MATRIX=$(./gradlew -q deployMatrix --console=plain)
          MATRIX_SIZE=$(echo $MATRIX | jq '.project|length')
          DEPLOY_MATRIX_SIZE=$(echo $DEPLOY_MATRIX | jq '.project|length')

          if [ "$MATRIX_SIZE" == '0' ]; then
            echo "Empty matrix"
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "emptyMatrix=true" >> $GITHUB_OUTPUT
          else
            echo Setting matrix to $MATRIX
            echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
            echo "emptyMatrix=false" >> $GITHUB_OUTPUT
          fi
          if [ "$DEPLOY_MATRIX_SIZE" == '0' ]; then
            echo "Empty deploy matrix"
            echo "deployMatrix=[]" >> $GITHUB_OUTPUT
            echo "emptyDeployMatrix=true" >> $GITHUB_OUTPUT
          else
            echo Setting deploy matrix to $DEPLOY_MATRIX
            echo "deployMatrix=${DEPLOY_MATRIX}" >> $GITHUB_OUTPUT
            echo "emptyDeployMatrix=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: generate_vars
    permissions:
      packages: write
      id-token: write
    name: build
    runs-on: ubuntu-latest
    if: needs.generate_vars.outputs.emptyMatrix == 'false'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate_vars.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'
      - name: cache gradle wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: test and build
        run: ./gradlew ${{ matrix.project }}:build
      - name: Check app.jar existence
        id: app_jar
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ matrix.project }}/build/libs/app.jar"
      - name: build docker image
        if: steps.app_jar.outputs.files_exists == 'true'
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: tbd
          image_suffix: ${{ matrix.project }}
          dockerfile: Dockerfile
          docker_context: ${{ matrix.project }}
      - name: lage build-fil
        if: ${{ always() }}
        run: |
          echo "${{ steps.docker-build-push.outputs.image }}" > "${{ matrix.project }}_build_${{ steps.docker-build-push.outcome }}.txt"
      - name: laste opp build-fil
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          retention-days: 1
          name: "${{ matrix.project }}_build_result"
          path: "${{ matrix.project }}_build_${{ steps.docker-build-push.outcome }}.txt"

  deploy:
    needs: [generate_vars, build]
    name: deploy
    if: always() && needs.generate_vars.outputs.emptyDeployMatrix == 'false'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate_vars.outputs.deployMatrix) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: create env vars
        run: |
          NAIS_VARS_FILE="config/${{ matrix.project }}/${{ matrix.cluster }}.yml"
          echo "NAIS_VARS_FILE=$NAIS_VARS_FILE" >> $GITHUB_ENV
      - name: Fetch sources
        uses: actions/checkout@v4
      - name: laste ned build-fil
        uses: actions/download-artifact@v4
        with:
          name: "${{ matrix.project }}_build_result"
      - name: ser om vi har nais config og at bygget gikk bra
        id: deploy-files
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ env.NAIS_VARS_FILE }}, ${{ matrix.project }}_build_success.txt"
      - name: hente ut image fra build-fil
        run: |
          NAIS_IMAGE=$(cat "${{ matrix.project }}_build_success.txt")
          echo "NAIS_IMAGE=$NAIS_IMAGE" >> $GITHUB_ENV
      - name: deploy
        if: steps.deploy-files.outputs.files_exists == 'true'
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: ${{ matrix.cluster }}
          RESOURCE: config/nais.yml
          VAR: app=${{ matrix.project }}
          VARS: ${{ env.NAIS_VARS_FILE }}
          IMAGE: ${{ env.NAIS_IMAGE }}
